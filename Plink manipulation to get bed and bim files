## intially getting the plink files as such
 vcftools --vcf input.vcf --plink --out filename
 
 ## gives the output the log files, Map and ped files, however we want our files to be in the binary files as these files are easier to manipulate and do the necessary analyis. Thus using the command
 
 plink --file plinkfile --make-bed --out plinkfile --noweb 

## using the awk to get the gene and exon information
curl  -s "http://hgdownload.cse.ucsc.edu/goldenPath/hg19/database/refFlat.txt.gz" | gunzip -c | awk '{n=int($9); split($10,S,/,/);split($11,E,/,/); for(i=1;i<=n;++i) {printf("%s,%s,%s,%s,%s\n",$1,$2,$3,S[i],E[i]);} }' > test.txt

Admins-MacBook-Pro:Downloads admin$ less -Sx20 test.txt 

Get the gene list from the hgTable listfrom USCG genome browser
Gene <- read.delim("~/Downloads/gene", dec=",")
glist.hg19 <- read.table("~/Downloads/glist-hg19.txt", quote="\"")
Gene <- Gene[order(-Gene$exonCount),]
Gene_dup =Gene[duplicated(Gene$name2),]
Gene_non =Gene[!duplicated(Gene$name2),]
Gene_non$chrom<- as.character(Gene_non$chrom)
Gene_non$chrom<- sapply(strsplit(Gene_non$chrom, "_"), "[",1)
Gene_non$chrom<-gsub("chr", "",Gene_non$chrom)
rownames(Gene_non)<- NULL
write.table(gene_non,"~/Desktop/gene_list.txt", sep="\t", quote = F, row.names = F)
write.table(Gene_non[,c(3,5,6,13)],"~/Desktop/plink_gene_list.txt", sep="\t", quote = F, row.names = F, col.names=F)

## Test with this gene
gene_non[gene_non$name2=="TTN",]


cat gene_list.txt | awk '{n=int($9); split($10,S,/,/);split($11,E,/,/); for(i=1;i<=n;++i) {printf("%s %s %s %s\n",$3,S[i],E[i],$13);} }' > Exon_list.txt
cat gene_list.txt | awk '{n=int($9); split($10,S,/,/);split($11,E,/,/); for(i=1;i<=n;++i) {printf("%s %s %s %s\n",$3,S[i]-6,E[i]+6,$13);} }' > Exon_plus6list.txt

## Using Annovar for the annonation of the variant could help out the things 



