Part-1) Phenotype Manipulation

A)## Qualitative Association study for Leucopenia
phe <- read.delim("~/Downloads/phe.txt")
#phe[c("LOG_TPK","LOG_Lpk","LOG_neu")] <- c(log(phe$TPK_Nadir),
#log(phe$LPK_Nadir), 
#log(phe$Neutrophiles_Nadir))

library(multic)

phe[c("ENQT_TPK","ENQT_Lpk","ENQT_Neu")]<-c(t.rank(phe$TPK_Nadir),
                                            t.rank(phe$LPK_Nadir),
                                            t.rank(phe$Neutrophiles_Nadir))


phe[c("Nadir_base_TPK","Nadir_base_Lpk","Nadir_base_Neu")]<- 
                                            c((log(phe$TPK_Nadir/phe$TPK_Baseline)),
                                            (log(phe$LPK_Nadir/phe$LPK_Baseline)),
                                            (log(phe$Neutrophiles_Nadir/phe$Neutrophiles_Baseline)))


hist(phe$Nadir_base_TPK); shapiro.test(phe$Nadir_base_TPK)
hist(phe$Nadir_base_Lpk); shapiro.test(phe$Nadir_base_Lpk)
hist(phe$Nadir_base_Neu); shapiro.test(phe$Nadir_base_Neu)

library(multic)

phe[c("ENQT_Nadir_base_TPK","ENQT_Nadir_base_Lpk","ENQT_Nadir_base_Neu")]<- 
  c((t.rank(phe$TPK_Nadir/phe$TPK_Baseline)),
    (t.rank(phe$LPK_Nadir/phe$LPK_Baseline)),
    (t.rank(phe$Neutrophiles_Nadir/phe$Neutrophiles_Baseline)))

hist(phe$ENQT_Nadir_base_TPK); shapiro.test(phe$ENQT_Nadir_base_TPK)
hist(phe$ENQT_Nadir_base_Lpk); shapiro.test(phe$ENQT_Nadir_base_Lpk)
hist(phe$ENQT_Nadir_base_Neu); shapiro.test(phe$ENQT_Nadir_base_Lpk)


pheno_trim<-phe[!phe$FID %in% c("S0328","S0664","S0580","S0922"),]
row.names(pheno_trim)<- NULL

write.table(pheno_trim,"phenotype_manipulated.txt", 
            sep="\t", quote = F, row.names = F)

## Quantitative phenotype files are generated for each individual phenotypes
write.table(pheno_trim[,c(1,2,10,12,22,29,32,35)],"Throm.fam", 
            sep="\t", quote = F, row.names = F)
write.table(pheno_trim[,c(1,2,14,16,23,30,33,36)],"Leu.fam", 
            sep="\t", quote = F, row.names = F)
phe_Neu<-pheno_trim[,c(1,2,18,20,24,31,34,37)]
phe_Neu[, 5:6][is.na(phe_Neu[, 5:8])] <- -9
getwd()

Phe_Thr_low_tox<-pheno_trim[which(pheno_trim$TPK_CTC==0 | pheno_trim$TPK_CTC==1),]
Phe_Thr_high_tox<-pheno_trim[which(pheno_trim$TPK_CTC==3 | pheno_trim$TPK_CTC==4),]

Phe_Leu_low_tox<- pheno_trim[which(pheno_trim$LPK_CTC==0 | pheno_trim$LPK_CTC==1),]
Phe_Leu_high_tox<- pheno_trim[which(pheno_trim$LPK_CTC==3 | pheno_trim$LPK_CTC==4),]

Phe_Neu_low_tox<- 
  pheno_trim[which(pheno_trim$Neutrophiles_CTC==0 | pheno_trim$Neutrophiles_CTC==1),]
Phe_Neu_high_tox<- 
  pheno_trim[which(pheno_trim$Neutrophiles_CTC==3 | pheno_trim$Neutrophiles_CTC==4),]

Phe_Thr_high_tox$Group <- 1
Phe_Thr_low_tox$Group <- 0
Phe_Thr_high_tox$phe <- 2
Phe_Thr_low_tox$phe <-1
row.names(Phe_Thr_high_tox)<- NULL
row.names(Phe_Thr_low_tox)<- NULL
Phe_Quali_Thr <- rbind(Phe_Thr_high_tox,Phe_Thr_low_tox)

write.table(Phe_Quali_Thr[,1],"Thrombopenia", 
            sep="\t", quote = F, row.names = F,col.names = F)
write.table(Phe_Quali_Thr[,c(1,2,33)],"Thr.fam",
            sep="\t", quote = F, row.names = F)


Phe_Leu_high_tox$Groups<-2
Phe_Leu_low_tox$Groups<-1
row.names(Phe_Leu_high_tox)<- NULL
row.names(Phe_Leu_low_tox)<- NULL


Phe_Neu_high_tox$Group <- 1
Phe_Neu_low_tox$Group <- 0
Phe_Neu_high_tox$phe <- 2
Phe_Neu_low_tox$phe <- 1
row.names(Phe_Neu_high_tox)<- NULL
row.names(Phe_Neu_low_tox)<- NULL
Phe_Quali_Neu <- rbind(Phe_Neu_high_tox,Phe_Neu_low_tox)

write.table(Phe_Quali_Neu[,1],"Neutropenia", 
            sep="\t", quote = F, row.names = F,col.names = F)
write.table(Phe_Quali_Neu[,c(1,2,33)],"Neu.fam",
            sep="\t", quote = F, row.names = F)

Part -2) Genotype manipulation

2.1)Genotype Quality Filtering 

Apply Filter criteria 1)-  Filter of the variants based on the genotyping depth ahd the GATK Filter

For the intial analysis of the quantitative traits- in our case the toxicity score of the individual phenotype, we first have to qualtiy analysis of the genotype data. For that we first considered the variants that have passed through the GATK filter and have the mean depth score of 10 over all nucleotides. From the vcftools manuals we use the command the min-meanDP. This includes only sites with mean depth values (over all included individuals) greater than or equal to the "--min-meanDP" value of 10. 

vcftools --vcf raw.vcf --remove-filtered-all --min-meanDP 10 --recode --out Filter1

## Number of Variants =  158753/211467

Apply quality filter criteria 2 ) Considering the genotyping rate for all the 216 individuals, we find that the three individuals S0328, S0664 who have genotyping rate lower than threshold of 0.95 are removed from the further analysis. Similarly the sample S0580 are removed as there are large number of variants present and hence the possibility of contamination. And sample S0922 was removed as it was similar to the S1056. After considering the genotyping rate, the IBD descent we have 212 samples.

head sample_remove
S0328
S0664
S0580
S0922

vcftools --vcf Filter1.recode.vcf  --max-missing 0.95 --remove sample_remove --recode --out Common_rare
152042 out of a possible 158753 Sites

Dividing the Common_Rare.VCF file into common and rare variants for further downstreaming analysis
vcftools --vcf Common_rare.recode.vcf --maf 0.01 --recode --Common
74281 out of a possible 152042 Sites
vcftools --vcf Common_rare.recode.vcf --max-maf 0.01 --recode --out Rare


## Gene based association
First converting the vcf files into plink files using the command

vcftools --vcf Common_rare.recode.vcf --plink --out ./Quantitative/Common_Rare
plink --file Common_Rare --out Common_rare --make-bed --noweb

This only outputs the bialleic files from the vcftools and kept all the 150402 sites

Now getting the exon plus six basepairs for mapping the individual biallelic variant to respective exons

Doing the following analysis in R
###################################################################################
Gene <- read.delim("~/Downloads/gene", dec=",")
##glist.hg19 <- read.table("~/Downloads/glist-hg19.txt", quote="\"") checking what is needed from the original gene list in the plink documentation

Gene <- Gene[order(-Gene$exonCount),]
Gene_dup =Gene[duplicated(Gene$name2),]
Gene_non =Gene[!duplicated(Gene$name2),]
Gene_non$chrom<- as.character(Gene_non$chrom)
Gene_non$chrom<- sapply(strsplit(Gene_non$chrom, "_"), "[",1)
Gene_non$chrom<-gsub("chr", "",Gene_non$chrom)
rownames(Gene_non)<- NULL
write.table(Gene_non,"~/Desktop/gene_list.txt", sep="\t", quote = F, row.names = F)
write.table(Gene_non[,c(3,5,6,13)],"~/Desktop/plink_gene_list.txt", sep="\t", quote = F, row.names = F, col.names=F)

##################################################################################
################# Running the following pipeline in unix to get the gene plus 6 basepairs for the every exons in the Refseq database###########

cat gene_list.txt | awk '{n=int($9); split($10,S,/,/);split($11,E,/,/); for(i=1;i<=n;++i) {printf("%s %s %s %s\n",$3,S[i],E[i],$13);} }' > Exon_list.txt
cat gene_list.txt | awk '{n=int($9); split($10,S,/,/);split($11,E,/,/); for(i=1;i<=n;++i) {printf("%s %s %s %s\n",$3,S[i]-6,E[i]+6,$13);} }' > Exon_plus6list.txt

###################################################################################


Now doing the further analysis in linux using plink


vcftools --vcf Common_rare.recode.vcf --plink --out ./Quantitative/Common_Rare

Getting the binary files of the original ped files
plink --file Common_Rare --out Common_rare --make-bed --noweb

plink --file Common_Rare --noweb --assoc --pheno ../Leucopenia.fam --mpheno 4 --linear --out LPK_baseline_linear

plink --gene-report LPK_baseline_linear.assoc.linear --gene-list ./Gene_list_plink_files/plink_gene_list.txt --out Gene_mapping --noweb

plink --gene-report LPK_baseline_linear.assoc.linear --gene-list ./Gene_list_plink_files/Exon_list.txt --out Exon_mapping --noweb

plink --gene-report LPK_baseline_linear.assoc.linear --gene-list ./Gene_list_plink_files/Exon_plus6list.txt --out Exo_plus_six_mapping --noweb








